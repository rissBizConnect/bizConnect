package org.myweb.first.member.controller;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.myweb.first.member.model.dto.User;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller // 설정 xml 에 해당 클래스를 Controller 로 자동 등록해 줌
public class MemberController {

	// 뷰페이지 내보내기용 메소드 --------------------------------------------

	// 로그인 페이지 내본기용
	@RequestMapping(value = "loginPage.do", method = { RequestMethod.GET, RequestMethod.POST })
	public String moveLoginPage() {
		return "member/loginPage";
	}

	// 회원가입 페이지 내보내기용
	@RequestMapping("enrollPage.do") // 전송방식생략되면 기본이 get 임
	public String moveEnrollPage() {
		return "member/enrollPage";
	}

	// 요청 받아서 모델쪽 서비스로 넘기고 결과받는 메소드 ------------------------------

	// 로그인 처리용 메소드 : Servlet 방식으로 처리
//	@RequestMapping(value = "login.do", method = RequestMethod.POST)
//	public String loginMethod(HttpServletRequest request, HttpServletResponse response) {
//		User user = new User();
//		user.setUserId(request.getParameter("userid"));
//		user.setUserPwd(request.getParameter("userpwd"));
//
//		System.out.println("login : " + user);	//전송온 값 확인
//
//
//		return "common/main";
//	}

	// 로그인 처리용 메소드 : command 객체 사용
	// 서버로 전송온 parameter 값을 저장하는 객체를 command 객체라고 함
	// input 태그의 name 속성의 이름과 dto(vo) 객체의 필드명이 같으면 command 객체가 값을 자동으로 받음
	@RequestMapping(value = "login.do", method = RequestMethod.POST)
	public String loginMethod() {
		
	}
}
