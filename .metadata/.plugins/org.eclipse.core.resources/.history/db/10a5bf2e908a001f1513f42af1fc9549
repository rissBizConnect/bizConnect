package org.riss.bizconnect.hr.retire.model.service;


import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;

import org.riss.bizconnect.common.model.dto.Paging;
import org.riss.bizconnect.hr.retire.model.dao.RetireDAO;
import org.riss.bizconnect.hr.retire.model.dto.Retire;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service("retireService")
public class RetireServiceImpl implements RetireService {
    
	@Autowired
	private RetireDAO retireDAO;
	
	

	    @Override
	    public void insertRetire(Retire retire) {
	        retireDAO.insertRetire(retire);
	    }

	    @Override
	    public Retire selectRetireByRetNo(String retNo) {
	        return retireDAO.selectRetireByRetNo(retNo);
	    }

	    @Override
	    public void updateRetire(Retire retire) {
	        retireDAO.updateRetire(retire);
	    }

	    @Override
	    public void deleteRetire(String retNo) {
	        retireDAO.deleteRetire(retNo);
	    }

		@Override
		public int selectRetireCount(Retire retire) {
			return retireDAO.selectRetireCount(retire);
		}

		@Override
		public ArrayList<Retire> selectRetireList(Paging paging) {
			return retireDAO.selectRetireList(paging);
		}

		@Override
		public int calculateTotalWorkDays(Retire retire) {
		    // Retire 객체에서 입사일과 퇴사일을 가져옵니다.
		    Date entryDate = retire.getUserEntryDate(); // 입사일
		    Date retireDate = retire.getRetDate();       // 퇴사일
		    
		    if (entryDate == null || retireDate == null) {
		        throw new IllegalArgumentException("입사일과 퇴사일은 null일 수 없습니다.");
		    }

		    // 입사일이 퇴사일보다 이후인 경우 예외 처리
		    if (retireDate.before(entryDate)) {
		        throw new IllegalArgumentException("퇴사일은 입사일보다 이후여야 합니다.");
		    }

		    // Date를 LocalDate로 변환
		    LocalDate startDate = entryDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); // 입사일
		    LocalDate endDate = retireDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().plusDays(1); // 퇴사일 포함

		    // 입사일과 퇴사일 간의 일수를 계산
		    long totalDays = ChronoUnit.DAYS.between(startDate, endDate);
		    
		    return totalDays;
		}

 
	
}
