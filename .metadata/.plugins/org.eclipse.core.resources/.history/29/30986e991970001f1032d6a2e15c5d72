package org.myweb.first.member.controller;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.myweb.first.member.model.dto.User;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller // 설정 xml 에 해당 클래스를 Controller 로 자동 등록해 줌
public class MemberController {

	// 뷰페이지 내보내기용 메소드 --------------------------------------------

	// 로그인 페이지 내본기용
	@RequestMapping(value = "loginPage.do", method = { RequestMethod.GET, RequestMethod.POST })
	public String moveLoginPage() {
		return "member/loginPage";
	}

	// 회원가입 페이지 내보내기용
	@RequestMapping("enrollPage.do") // 전송방식생략되면 기본이 get 임
	public String moveEnrollPage() {
		return "member/enrollPage";
	}

	// 요청 받아서 모델쪽 서비스로 넘기고 결과받는 메소드 ------------------------------

	// 로그인 처리용 메소드 : Servlet 방식으로 처리
	@RequestMapping(value = "login.do", method = RequestMethod.POST)
	public String loginMethod(HttpServletRequest request, HttpServletResponse response) {
		User user = new User();
		user.setUserId(request.getParameter("userid"));
		user.setUserPwd(request.getParameter("userpwd"));

		System.out.println("login : " + user);

//		if (loginUser != null) { // 성공시
//			// 로그인 상태 관리를 위해서 세션 객체를 생성
//			HttpSession session = request.getSession(); // == request.getSession(true)
//			// 기존 세션 객체가 있으면 그 객체를 리턴받고, 세션 객체가 없으면 새 세션 객체를 생성함
//			// 세션 객체가 새로 만들어지면, 세션ID 가 자동 발급이 됨
//
//			System.out.println("생성된 세션 객체의 id : " + session.getId());
//			// 자동으로 request 객체에서 세션 id 가 기록이 되어서 클라이언트와 서버를 왔다 갔다 함
//
//			// 세션 객체 안에 로그인한 회원 정보를 기록 저장할 수도 있음 (뷰페이지에서 꺼내서 사용함)
//			session.setAttribute("loginUser", loginUser);
//
//			// 로그인 성공시 내보낼 뷰페이지 지정
//			response.sendRedirect("index.jsp"); // "first/index.jsp
//
//		} else { // 실패시
//			// views/common/error.jsp 를 내보냄 + 오류 메세지(에러 이유)도 함께 전송 보냄
//			// 내보낼 뷰 페이지와 같이 보낼 데이터가 있을 때는, RequestDispatcher 클래스를 사용함
//			// => 상대경로만 사용할 수 있음
//			// 모든 커트롤러(서블릿)의 실행 위치는 root (content directory : webapp) 에서 실행되고 있음
//
//			// 내보낼 뷰 지정함 : 상대경로만 사용 가능함
//			RequestDispatcher view = request.getRequestDispatcher("views/common/error.jsp");
//			// 뷰와 함께 내보낼 데이터 처리 : request 객체에 저장함 => Map 구조임 (value)
//			// setAttribute("key", value object); 사용함
//			request.setAttribute("message", "로그인 실패! 아이디와 암호를 다시 확인하세요.");
//
//			// 로그인을 요청한 클라이언트로 내보냄
//			view.forward(request, response);
//		}
		return "common/main";
	}

}
