package org.riss.bizconnect.hr.document.model.controller;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import org.riss.bizconnect.hr.document.model.dto.Certificate;
import org.riss.bizconnect.hr.document.model.service.CertificateService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class CertificateController {
    
    @Autowired
    private CertificateService certificateService; // 서비스 주입
    
    // 증명서 추가
    @RequestMapping(value = "cerAdd.do", method = RequestMethod.POST) // POST 요청을 처리
    @ResponseBody
    public String insertCertificate(HttpServletRequest request) {
        Certificate certificate = new Certificate();
        // 클라이언트로부터 받은 데이터를 Certificate DTO에 설정
        certificate.setContractsTitle(request.getParameter("contractsTitle")); // 서류명 설정
        certificate.setContractsDate(request.getParameter("contractsDate")); // 등록 날짜 설정
        certificate.setContractsFile(request.getParameter("contractsFile")); // 파일 경로 설정
        certificate.setContractsDescription(request.getParameter("contractsDescription")); // 기타 설명 설정
        certificate.setGid(request.getParameter("gid")); // 로그인 아이디 설정
        certificate.setComCode(request.getParameter("comCode")); // 회사 코드 설정
        
        // 서비스 호출로 증명서 추가
        certificateService.insertCertificate(certificate);
        return "증명서가 추가되었습니다!"; // 성공 메시지 반환
    }

    // 증명서 목록 조회
    @RequestMapping(value = "cerList.do", method = RequestMethod.GET) // GET 요청을 처리
    @ResponseBody
    public ArrayList<Certificate> selectCertificates(HttpServletRequest request) {
        String gid = request.getParameter("gid"); // 로그인 아이디
        String comCode = request.getParameter("comCode"); // 회사 코드

        // 서비스 호출로 증명서 목록 조회
        return certificateService.selectCertificates(Certificate certificate); // gid와 comCode 전달
    }

    // 증명서 수정
    @RequestMapping(value = "cerUpdate.do", method = RequestMethod.PUT) // PUT 요청을 처리
    @ResponseBody
    public String updateCertificate(HttpServletRequest request) {
        Certificate certificate = new Certificate();
        // 클라이언트로부터 받은 데이터를 Certificate DTO에 설정
        certificate.setContractId(Integer.parseInt(request.getParameter("contractId"))); // 계약서 ID 설정
        certificate.setContractsTitle(request.getParameter("contractsTitle")); // 서류명 설정
        certificate.setContractsFile(request.getParameter("contractsFile")); // 파일 경로 설정
        certificate.setContractsDescription(request.getParameter("contractsDescription")); // 기타 설명 설정
        
        // 서비스 호출로 증명서 수정
        certificateService.updateCertificate(certificate);
        return "증명서가 수정되었습니다!"; // 성공 메시지 반환
    }

    // 증명서 삭제
    @RequestMapping(value = "cerDelete.do", method = RequestMethod.DELETE) // DELETE 요청을 처리
    @ResponseBody
    public String deleteCertificate(HttpServletRequest request) {
        Certificate certificate = new Certificate();
        // 클라이언트로부터 받은 데이터를 Certificate DTO에 설정
        certificate.setGid(request.getParameter("gid")); // 로그인 아이디 설정
        certificate.setComCode(request.getParameter("comCode")); // 회사 코드 설정
        certificate.setContractsFile(request.getParameter("contractsFile")); // 파일 경로 설정
        
        // 서비스 호출로 증명서 삭제
        certificateService.deleteCertificate(certificate);
        return "증명서가 삭제되었습니다!"; // 성공 메시지 반환
    }
}
