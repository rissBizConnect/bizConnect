package org.myweb.first.test.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;
import org.myweb.first.notice.model.dto.Notice;
import org.myweb.first.notice.model.service.NoticeService;
import org.myweb.first.test.model.dto.Test;
import org.myweb.first.test.model.service.TestService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class TestController {
	//이 컨트롤러의 메소드들이 잘 구동되는지, 값이 잘 전달 또는 리턴 받았는지 확인하기 위한 로그 객체 생성
	private static final Logger logger = LoggerFactory.getLogger(TestController.class);

	@Autowired
	private TestService testService;
	
	@Autowired
	private NoticeService noticeService;
	
	//뷰 페이지 이동 처리용 메소드 --------------------------------------------------------
	@RequestMapping("moveAjax.do")
	public String moveAjaxPage() {
		return "test/testAjaxView";
	}
	
	
	//**************************************************************
	//ajax 요청 처리용 메소드 작성부
	//ajax (Asynchronous JavaScript And Xml)
	//자바스크립트와 xml을 이용한 비동기식 네트워크 통신 방식임 : 별도의 입출력 스트림을 가짐
	@RequestMapping("test1.do")
	//@ResponseBody	//문자열 하나 리턴시에는 생략해도 됨
	public void test1(HttpServletResponse response) throws IOException {
		//클라이언트로 부터 요청이 오면, 처리 결과로 문자열값을 별도의 스트림을 통해서 내보냄
		
		//서비스 메소드 실행하고 결과받기 (생략)
		
		//클라이언트로 내보낼 출력스트림 생성
		//문자값 전송시에는 mimiType 설정 생략해도 됨 : 
		//response.setContentType("text/html; charset=utf-8");
		PrintWriter out = response.getWriter();
		
		out.append("served at : /first");
		out.flush();
		
		out.close();
	}
	@RequestMapping(value="test2.do", method=RequestMethod.POST)
	//@ResponseBody	//문자열 하나 리턴시에는 생략해도 됨
	public void test2(Test test, HttpServletResponse response) throws IOException {
		//서비스 메소드 실행하고 결과 받기
		int result = testService.selectTest(test);
		
		//클라이언트로 내보낼 출력스트림 생성
		//문자값 전송시에는 mimiType 설정 생략해도 됨 : 
		//response.setContentType("text/html; charset=utf-8");
		PrintWriter out = response.getWriter();
		
		if(result == 1) {
			out.append("ok");
		}else {
			out.append("not found");
		}
		
		out.flush();
		out.close();
	}

	@RequestMapping(value="test3.do", method=RequestMethod.POST)
	@ResponseBody //리턴하는 jsionString 을  response 객체의 body 영역에 기록해서 보낸다는 의미
	public String test3Method() throws UnsupportedEncodingException {
		//ajax 로 서비스 요청시 클라이언트로 응답하는 방법은 2가지
		//방법 1 : 클라이언트로 부터 요청이 오면, jsonString 을 별도의 스트림을 열어서 내보냄
		//public void => 직접 출력스트림을 만들어서 내보냄
		//방법 2 : jsonString을 뷰리졸버로 리턴하면 등록된 jsonView 가 받아서 내보냄
		//public String => servlet-context.xml에 설정된 JsonView 로 내보냄
		
		//서비스 메소드 실행하고 결과받기
		//최근 등록한 공지글 1개 조회해 옴
		Notice notice = noticeService.selectLast();
		
		//받은 notice 를 JSONObject 에 옮겨 담기
		JSONObject job = new JSONObject();  //org.json.simple.JSONObject 임
		
		job.put("noticeno", notice.getNoticeNo());
		//문자열값에 한글이 포함되어 있다면, 반드시 인코딩해서 저장해야 함
		//java.net.URLEncoder 의 static 메소드인 encode("한글이있는문자열값", "문잣셋") 사용함
		job.put("noticetitle", URLEncoder.encode(notice.getNoticeTitle(), "utf-8"));
		job.put("noticewriter", notice.getNoticeWriter());
		//날짜데이터는 반드시 문자열로 바꿔서 저장할 것 : 날짜 그대로 저장하면 뷰에서 json 전체 출력 안 됨
		job.put("noticedate", notice.getNoticeDate().toString());
		//문자열값에 한글이 포함되어 있다면, 반드시 인코딩해서 저장해야 함
		//java.net.URLEncoder 의 static 메소드인 encode("한글이있는문자열값", "문잣셋") 사용함
		job.put("noticecontent", URLEncoder.encode(notice.getNoticeContent(), "utf-8"));

		//리턴시에는 json 객체를 jsonString 으로 바꿔서 리턴해야 함
		return job.toJSONString();
	}
	
}
